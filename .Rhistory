regions_raw <- fromJSON(url)
regions <-
# regions <- convert list to data frame. You can use map_df in purrr package
map_df(seq_len(nrow(regions_raw)), function(i) {
tibble(
state_name = regions_raw$states[[i]],
region = regions_raw$region[[i]],
region_name = regions_raw$region_name[[i]]
)
}) |>
# change long name
mutate(region_name = ifelse(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands",
"Other",
region_name
)
) |>
select(state_name, region, region_name)
head(regions)
library(dplyr)
population <- population |>
left_join(regions, by = "state_name")
head(population)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
# create request object
req <- request(api)
head(req)
cases_raw <- req |>
# perform the request (return a response with status code, headers, body)
req_perform() |>
# convert JSON arrays into a list of vectors -> data frame
resp_body_json(simplifyVector = T) |>
as_tibble()
head(cases_raw)
print("Comments: The cases_raw data contains 1000 rows instead of all rows. This is because the API has a default limit of 1000 records per request. Thus, when we didn't increase the limit parameter, we would only get 1000 rows.")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query(`$limit`=10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = T) |>
as_tibble()
summary(cases_raw)
cases <- cases_raw |>
mutate(
# ISO-8601 datetime with a time not just simple date, so ymd can't parse
date = as.Date(end_date),
cases = as.numeric(new_cases)
) |>
filter(!is.na(state), !is.na(date), !is.na(cases)) |>
select(state, date, cases)
head(cases)
cases |>
mutate(year = year(date)) |>
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state" = "state", "year" = "year")) |>
mutate(cases_per_100k = cases / population * 100000) |>
filter(!is.na(cases_per_100k)) |>
filter(!is.na(region_name)) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~ region_name) +
labs(
x = "Date",
y = "Cases per 100,000",
title = "SARS-COV2 Cases per 100,000 by State from 2020 to 2021"
) +
theme(
axis.text.x = element_text(angle = 45)
)
#head(cases)
library(knitr)
library(lubridate)
cases |>
mutate(date = lubridate::ymd(date),
year = lubridate::year(date),
month = lubridate::month(date, label = T, abbr = F),
day = lubridate::day(date)) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarise(
total_cases = sum(cases, na.rm = T),
.groups = "drop"
) |>
arrange(year, month) |>
kable()
# cases
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
req2 <- request(deaths_url) |>
req_url_query(`$limit`=10000000000)
head(req2)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths) |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
head(deaths)
deaths |>
filter(state != "United States") |>
group_by(state) |>
summarise(
total = sum(deaths, na.rm = T),
.groups = "drop"
) |>
arrange(desc(total)) |>
slice_head(n = 10) |>
mutate(state = factor(state, levels = rev(state))) |>
ggplot(aes(x = state, y = total)) +
geom_col() +
labs(
x = "State",
y = "Total deaths",
title = "Top 10 US States by Total Deaths Caused by SARS-COV2 Cases"
) +
coord_flip()+
theme(
axis.text.x = element_text(angle = 45)
)
View(deaths)
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(paste0(
"https://api.census.gov/data/2021/pep/population?",
"get=POP_2020,POP_2021,NAME&for=state:*&key=",
census_key
))
# print(request)
response <- request |>
req_perform()
response$status_code
type <- resp_content_type(response)
print(type)
population <- resp_body_json(response,
# automatically convert JSON arrays into R vectors
simplifyVector = T) |> as.matrix()
# head(population)
class(population)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |>
# Use janitor row to names function
row_to_names(row_number = 1) |>
# convert to tibble
as_tibble() |>
# remove stat column
select(-state) |>
# rename state column to state_name
rename(state_name = NAME) |>
# use pivot_longer to tidy (POP_2020 and POP_2021 to two columns)
pivot_longer(
cols = starts_with("POP_"),
names_to = "year",
values_to = "population"
) |>
# remove POP_ from year
mutate(year = str_remove(year, "POP_")) |>
# parese all relevant colunns to numeric
mutate(population = as.numeric(population),
year = as.numeric(year)) |>
# add state abbreviations using state.abb variable
# use case_when to add abbreviations for DC and PR
mutate(state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
))
head(population)
population |>
# reorder state by population sizes (automatically from large to small)
ggplot(aes(x = reorder(state_name, population),
y = population)) +
# assign aesthetic mapping
labs(
x = "State",
y = "Population",
title = "State population in 2020 and 2021"
) +
# use geom_col to plot barplot
geom_col() +
# flip coordinates so state names are on y and population sizes are on x
coord_flip() +
# facet by year
facet_wrap(~ year)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
# regions <- use jsonlit JSON parser
regions_raw <- fromJSON(url)
regions <-
# regions <- convert list to data frame. You can use map_df in purrr package
map_df(seq_len(nrow(regions_raw)), function(i) {
tibble(
state_name = regions_raw$states[[i]],
region = regions_raw$region[[i]],
region_name = regions_raw$region_name[[i]]
)
}) |>
# change long name
mutate(region_name = ifelse(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands",
"Other",
region_name
)
) |>
select(state_name, region, region_name)
head(regions)
library(dplyr)
population <- population |>
left_join(regions, by = "state_name")
head(population)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
# create request object
req <- request(api)
head(req)
cases_raw <- req |>
# perform the request (return a response with status code, headers, body)
req_perform() |>
# convert JSON arrays into a list of vectors -> data frame
resp_body_json(simplifyVector = T) |>
as_tibble()
head(cases_raw)
print("Comments: The cases_raw data contains 1000 rows instead of all rows. This is because the API has a default limit of 1000 records per request. Thus, when we didn't increase the limit parameter, we would only get 1000 rows.")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query(`$limit`=10000000000) |>
req_perform() |>
resp_body_json(simplifyVector = T) |>
as_tibble()
summary(cases_raw)
cases <- cases_raw |>
mutate(
# ISO-8601 datetime with a time not just simple date, so ymd can't parse
date = as.Date(end_date),
cases = as.numeric(new_cases)
) |>
filter(!is.na(state), !is.na(date), !is.na(cases)) |>
select(state, date, cases)
head(cases)
cases |>
mutate(year = year(date)) |>
filter(year %in% c(2020, 2021)) |>
left_join(population, by = c("state" = "state", "year" = "year")) |>
mutate(cases_per_100k = cases / population * 100000) |>
filter(!is.na(cases_per_100k)) |>
filter(!is.na(region_name)) |>
ggplot(aes(x = date, y = cases_per_100k, color = state)) +
geom_line() +
facet_wrap(~ region_name) +
labs(
x = "Date",
y = "Cases per 100,000",
title = "SARS-COV2 Cases per 100,000 by State from 2020 to 2021"
) +
theme(
axis.text.x = element_text(angle = 45)
)
#head(cases)
library(knitr)
library(lubridate)
cases |>
mutate(date = lubridate::ymd(date),
year = lubridate::year(date),
month = lubridate::month(date, label = T, abbr = F),
day = lubridate::day(date)) |>
filter(year %in% c(2020, 2021)) |>
group_by(year, month) |>
summarise(
total_cases = sum(cases, na.rm = T),
.groups = "drop"
) |>
arrange(year, month) |>
kable()
# cases
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
req2 <- request(deaths_url) |>
req_url_query(`$limit`=10000000000)
head(req2)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths) |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
head(deaths)
View(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble()
View(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group)
View(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(group == "By Total",
sex == "All Sexes",
age_group == "All Ages")
View(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(group == "By Total",
sex == "All Sexes",
age_group == "All Ages") |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(group == "By Total",
sex == "All Sexes",
age_group == "All Ages") |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
head(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(group == "By Total",
sex == "All Sexes",
age_group == "All Ages") |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths)) |>
select(state, date, deaths)
head(deaths)
View(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(group == "By Total",
sex == "All Sexes",
age_group == "All Ages") |>
rename(
date = end_date,
deaths = covid_19_deaths
)
head(deaths)
View(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(group == "By Total",
sex == "All Sexes",
age_group == "All Ages") |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths)) |>
select(state, date, deaths)
head(deaths)
View(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(group == "By Week",
sex == "All Sexes",
age_group == "All Ages") |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths)) |>
select(state, date, deaths)
head(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(#group == "By Week",
sex == "All Sexes",
age_group == "All Ages") |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths)) |>
select(state, date, deaths)
head(deaths)
View(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(#group == "By Week",
sex == "All Sexes",
age_group == "All Ages") |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths)) |>
select(state, date, deaths, group)
head(deaths)
View(deaths)
deaths <- req2 |>
req_perform()|>
resp_body_json(simplifyVector = T) |>
as_tibble() |>
select(state, end_date, covid_19_deaths, group, sex, age_group) |>
filter(group == "By Total",
sex == "All Sexes",
age_group == "All Ages") |>
rename(
date = end_date,
deaths = covid_19_deaths
) |>
mutate(
date = as.Date(date),
deaths = as.numeric(deaths)
) |>
filter(!is.na(state), !is.na(date), !is.na(deaths)) |>
select(state, date, deaths, group)
head(deaths)
deaths |>
filter(state != "United States") |>
arrange(desc(deaths)) |>
slice_head(n = 10) |>
mutate(state = factor(state, levels = rev(state))) |>
ggplot(aes(x = state, y = deaths)) +
geom_col() +
labs(
x = "State",
y = "Total deaths",
title = "Top 10 US States by Total Deaths Caused by SARS-COV2 Cases"
) +
coord_flip()+
theme(
axis.text.x = element_text(angle = 45)
)
